{"version":3,"sources":["components/utils.js","App.js","serviceWorker.js","index.js"],"names":["utils","tronWeb","contract","setTronWeb","contractAddress","console","log","at","App","props","state","tronwebaddress","balance","Interest","Deposit","TotalInterest","conBalance","value","timeIn","Nowtime","installed","loggedIn","handleChange","bind","handleSubmit","this","setState","loading","Promise","resolve","tronWebState","window","ready","tries","timer","setInterval","TronWeb","clearInterval","defaultAddress","hex","address","toHex","base58","on","Utils","currentAddr","updateStat","UpdateFirst","add","location","reload","contractBalance","call","then","res","toNumber","toFixed","getInterest","Wallet","document","getElementById","textContent","getTotalInterest","data1","perSec","Date","now","title","data","Withdraw","send","reinvest","event","target","potFund","callValue","preventDefault","className","style","color","fontSize","placeholder","onChange","onClick","width","background","padding","margin","id","fontWeight","height","withdraw","href","align","React","Component","Boolean","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.28b24d8c.chunk.js","sourcesContent":["const utils = {\r\n  tronWeb: false,\r\n  contract: false,\r\n\r\n  async setTronWeb(tronWeb, contractAddress) {\r\n    console.log(\"contractAddress\", contractAddress);\r\n    this.tronWeb = tronWeb;\r\n    this.contract = await tronWeb.contract().at(contractAddress);\r\n  },\r\n};\r\nexport default utils;\r\n","import React from \"react\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./App.css\";\nimport Utils from \"./components/utils\";\nimport TronWeb from \"tronweb\";\n// import Header from './components/Header'\n\nconst FOUNDATION_ADDRESS = \"TWiWt5SEDzaEqS6kE5gandWMNfxR2B5xzg\";\n\nconst CONTRACT = \"TJSPx5fyCtCk5Rp76EUAQYpTtE4abL7ss3\";\n\n////////////////////////////////////////////////////////////////////////////////////\n/// Add your contract address here\n////////////////////////////////////////////////////////////////////////////////////\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      tronwebaddress: \"Laoding ........\",\n      balance: \"Laoding ........\",\n      Interest: \"Laoding ........\",\n      Deposit: \"Laoding ........\",\n      TotalInterest: \"Laoding ........\",\n      conBalance: \"Laoding ........\",\n      value: \"\",\n      timeIn: \"Laoding ........\",\n      Nowtime: 0,\n      tronWeb: {\n        installed: false,\n        loggedIn: false,\n      },\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  async componentDidMount() {\n   \n    this.setState({ loading: true });\n    await new Promise((resolve) => {\n      const tronWebState = {\n        installed: !!window.tronWeb,\n        loggedIn: window.tronWeb && window.tronWeb.ready,\n      };\n\n      if (tronWebState.installed) {\n        this.setState({\n          tronWeb: tronWebState,\n        });\n\n        return resolve();\n      }\n\n      let tries = 0;\n\n      const timer = setInterval(() => {\n        if (tries >= 10) {\n          const TRONGRID_API = \"https://api.trongrid.io\";\n\n          window.tronWeb = new TronWeb(\n            TRONGRID_API,\n            TRONGRID_API,\n            TRONGRID_API\n          );\n\n          this.setState({\n            tronWeb: {\n              installed: false,\n              loggedIn: false,\n            },\n          });\n\n          clearInterval(timer);\n          return resolve();\n        }\n\n        tronWebState.installed = !!window.tronWeb;\n        tronWebState.loggedIn = window.tronWeb && window.tronWeb.ready;\n\n        if (!tronWebState.installed) return tries++;\n\n        this.setState({\n          tronWeb: tronWebState,\n        });\n\n        resolve();\n      }, 100);\n    });\n\n    if (!this.state.tronWeb.loggedIn) {\n      // Set default address (foundation address) used for contract calls\n      // Directly overwrites the address object as TronLink disabled the\n      // function call\n      window.tronWeb.defaultAddress = {\n        hex: window.tronWeb.address.toHex(FOUNDATION_ADDRESS),\n        base58: FOUNDATION_ADDRESS,\n      };\n\n      window.tronWeb.on(\"addressChanged\", () => {\n        if (this.state.tronWeb.loggedIn) return;\n\n        this.setState({\n          tronWeb: {\n            installed: true,\n            loggedIn: true,\n          },\n        });\n      });\n    }\n\n    await Utils.setTronWeb(window.tronWeb, CONTRACT);\n    const currentAddr = Utils.tronWeb.defaultAddress[\"base58\"];\n\n    await this.setState({ tronwebaddress: currentAddr });\n    console.log(\"tmp_tronwebaddress\", currentAddr);\n\n    this.updateStat();\n    this.UpdateFirst();\n    // this.timenow();\n  }\n\n  async updateStat() {\n    setInterval(() => {\n      const add = Utils.tronWeb.defaultAddress[\"base58\"];\n      if(this.state.tronwebaddress != add){\n        window.location.reload();\n      }\n      \n\n\n\n\n      Utils.contract\n        .contractBalance()\n        .call()\n        .then((res) => {\n          // console.log(\"contractBalance\", res.toNumber());\n          // document.getElementById('data').textContent = res.toNumber();\n          this.setState({ conBalance: (res.toNumber() / 1e6).toFixed(3) });\n        });\n\n      Utils.contract\n        .timeIn(this.state.tronwebaddress)\n        .call()\n        .then((res) => {\n          // console.log(\"timenow\", res.toNumber());\n          // document.getElementById('data').textContent = res.toNumber();\n          this.setState({ timeIn: res.toNumber() });\n        });\n\n      Utils.contract\n        .getInterest()\n        .call()\n        .then((res) => {\n          // console.log(\"Interest\", res.toNumber());\n          // document.getElementById('data').textContent = res.toNumber();\n          this.setState({ Interest: res.toNumber() / 1e6 });\n        });\n\n      Utils.contract\n        .Wallet(this.state.tronwebaddress)\n        .call()\n        .then((res) => {\n          console.log(\"Deposit\", res.toNumber());\n          // document.getElementById('data').textContent = res.toNumber();\n          this.setState({ Deposit: res.toNumber() / 1e6 });\n          if (res.toNumber() <= 100e6) {\n            document.getElementById(\"perc\").textContent = \"4\";\n          } else if (res.toNumber() <= 500e6) {\n            document.getElementById(\"perc\").textContent = \"6\";\n          } else if (res.toNumber() <= 1000e6) {\n            document.getElementById(\"perc\").textContent = \"8\";\n          } else {\n            document.getElementById(\"perc\").textContent = \"10\";\n          }\n        });\n\n      Utils.contract\n        .getTotalInterest()\n        .call()\n        .then((res) => {\n          // console.log(\"TotalInterest\", res.toNumber());\n          // document.getElementById('data').textContent = res.toNumber();\n          this.setState({ TotalInterest:( res.toNumber() / 1e6).toFixed(3) });\n        \n        });\n    }, 5000);\n  }\n\n  UpdateFirst() {\n    setInterval(() => {\n      const data1 = this.state.Deposit * 1e6;\n      if (data1 >= 1e6) {\n        let dataInterest;\n        let data;\n        if (data1 < 500e6) {\n          data = (data1 * 4) / 100;\n        } else if (data1 >= 500e6 && data1 <= 1000e6) {\n          data = (data1 * 6) / 100;\n        } else if (data1 >= 1000e6 && data1 <= 2000e6) {\n          data = (data1 * 8) / 100;\n        } else {\n          data = (data1 * 10) / 100;\n        }\n\n        let timeNow = Date.now() / 1000 - this.state.timeIn;\n\n        let perSec = (data / 86400) * timeNow;\n        this.setState({ Nowtime: (perSec / 1e6).toFixed(5) });\n        if(perSec == 0){\n          document.title = \"Rushline - Interest Protocal\"\n        }\n        else{\n          document.title =  'BAL ' + (perSec / 1e6).toFixed(5) + ' TRX';\n        }\n\n        //   return(perSec);\n      }\n    }, 1000);\n  }\n\n  withdraw(data) {\n    Utils.contract\n      .Withdraw(data)\n      .send()\n      .then((res) => {});\n  }\n\n  reinvest() {\n    Utils.contract\n      .reinvest()\n      .send()\n      .then((res) => {});\n  }\n\n  handleChange(event) {\n    this.setState({ value: event.target.value });\n  }\n\n  handleSubmit(event) {\n    let data = this.state.value * 1e6;\n    Utils.contract\n      .potFund()\n      .send({ callValue: data })\n      .then((res) => {});\n    event.preventDefault();\n  }\n\n  render() {\n    return (\n     \n      <div className=\"App\">\n        <div>\n          <div>\n            <div className=\"container\">\n              <div className=\"row mainCover\">\n                <div className=\"col\">\n                  <div>\n                    <label className=\"redColor coverHd\">RUSH </label>\n                  </div>\n                  <div className=\"pdhd\">\n                    <label\n                      className=\"whiteColor \"\n                      style={{ color: \"white\", fontSize: 100 }}\n                    >\n                      BLOCK \n                    </label>\n                  </div>\n                </div>\n                <div className=\"col-7 \">\n                  <label style={{ fontSize: 40 }}>\n                    Best Way To Earn Stake Your Tron and Earn Daily interest{\" \"}\n                    <span className=\"redColor\">Rush</span> Line\n                  </label>\n                  <label style={{ color: \"lightgrey\" }}>\n                    Staking rate :{\" \"}\n                    <span style={{ color: \"grey\" }}> 4 - 10 % Daily</span>\n                    <span style={{ color: \"grey\", fontSize: 14 }}>\n                      {\" \"}\n                      ( 4% 0 - 500 TRX, 6% &gt; 500 TRX, 8% &gt; 1000 TRX & 10%\n                      &gt; 2000 TRX )\n                    </span>\n                  </label>\n                  <div className=\"desc\">\n                    <span>\n                      Provably transparent{\" \"}\n                      <i className=\"fas ch fa-chevron-right\"></i>\n                    </span>{\" \"}\n                    &nbsp; &nbsp;\n                    <span>\n                      Open-source smart contract{\" \"}\n                      <i className=\"fas ch fa-chevron-right\"></i>\n                    </span>\n                    <br />\n                    <br></br>\n                    <br />\n                    <span>Start Earning immediately</span>\n                    <label className=\"inputCover\">\n                      <span>\n                        &nbsp;&nbsp;&nbsp;&nbsp;MAX&nbsp;&nbsp;&nbsp;&nbsp;\n                      </span>\n                      <input\n                        placeholder=\"0.0000\"\n                        className=\"playInp\"\n                        value={this.state.value}\n                        onChange={this.handleChange}\n                      />\n                      <button className=\"btn play\" onClick={this.handleSubmit}>\n                        PLAY WITH TRON\n                      </button>\n                    </label>\n                    <br />\n                    {/* <span style={{ fontSize: 14 }}> ~ 0.005 USD</span> */}\n                  </div>\n                </div>\n              </div>\n\n              <div>\n                <div className=\"dashboard\">   \n\n\n                      <label>{\n                         (\n                          this.state.tronWeb.installed ? <span style={{color:'grey'}}> Tronlink : <span style={{color:'#00ff00'}}>Connected</span> </span> : <span style={{color:'grey'}}> Tronlink : <span style={{color:'brown'}}>Not Connected</span> </span>\n                         )\n                        }</label>\n                  <div className=\"\">\n                    <div\n                      style={{\n                        width: \"70%\",\n                        background: \"#171310\",\n                        padding: 10,\n                        margin: \"auto\",\n                      }}\n                    >\n                      <label>\n                        {\" \"}\n                        <span className=\"redColor\">Rush </span>Bank :{\" \"}\n                        <span style={{ color: \"lightgrey\" }}>\n                          {this.state.conBalance}\n                        </span>{\" \"}\n                        TRX\n                      </label>\n                    </div>{\" \"}\n                    <br />\n                    <div>\n                      <div className=\"\" style={{ color: \"green\" }}>\n                        Your Deposit\n                      </div>\n                      {/* <label className=\"switch\" htmlFor=\"checkbox\"> \n                             <input type=\"checkbox\" id=\"checkbox\" /> \n                            <div className=\"slider round\"></div>\n\n                           </label> */}\n\n                      <h4>\n                        {\" \"}\n                        <span style={{ color: \"grey\" }}>\n                          {this.state.Deposit} TRX\n                        </span>\n                      </h4>\n                    </div>\n                    <h5>\n                      CURRENT INTEREST{\" \"}\n                      <span style={{ color: \"grey\", fontSize: 14 }}>\n                        (~ <span id=\"perc\">?</span>%)\n                      </span>\n                    </h5>\n                    <span className=\"amt\">{this.state.Nowtime}</span> TRX\n                    \n                  </div>\n                          <div style={{color:'grey'}}>Total Interest :<span style={{color:'#d0c3db',fontWeight:'bold'}}> { this.state.TotalInterest }</span></div>\n                  <div>\n                  <button \n                      className=\"btn\"\n                       style={{background:'#6f4d54',height:60}}\n                      onClick={(event) => {\n                        event.preventDefault();\n                        this.withdraw(1);\n                      }}\n                    >\n                      WITHDRAW INTEREST<br/> ( > 0.1 TRX)\n                    </button><br></br><hr></hr>\n                    <button\n                      className=\"btn\"\n                      onClick={(event) => {\n                        event.preventDefault();\n                        this.withdraw(2);\n                      }}\n                    >\n                      WITHDRAW ALL FUND\n                    </button>\n                    <button\n                      className=\"btn\"\n                      onClick={(event) => {\n                        event.preventDefault();\n                        this.reinvest();\n                      }}\n                      style={{ background: \"green\" }}\n                    >\n                      REINVEST\n                    </button>\n                   \n                  </div>\n                  <br></br>\n                  <br />\n\n                  <span style={{ color: \"grey\", fontSize: 12 }}>\n                    ENS : <a href=\"https://tronscan.org/#/contract/TJSPx5fyCtCk5Rp76EUAQYpTtE4abL7ss3/code\" style={{color:'lightblue'}}>RUSHLINE</a> \n                  </span>\n                </div>\n              </div>\n\n              {/* ------------------------------Cover------------------------------------------------------- */}\n\n              <div className=\"row mainCover\">\n                <div className=\"col\">\n                  <div className=\"mid\">\n                    <h6>STAKE YOUR TRON</h6>\n                    <p style={{ fontSize: 17, color: \"#708090\" }}>\n                      Start earning with us by staking your tron token and start\n                      earning immediately.\n                    </p>\n                  </div>\n                </div>\n                <div className=\"col\">\n                  <div className=\"mid\">\n                    <h6>EARN INTEREST</h6>\n                    <p style={{ fontSize: 17, color: \"#708090\" }}>\n                      Start recieving daily interest on your staked amount.{\" \"}\n                      <br></br>(2% for tron and 3% for Token locked in Vault).\n                    </p>\n                  </div>\n                </div>\n                <div className=\"col\">\n                  <div className=\"mid\">\n                    <h6>WITHDRAW EARNINGS</h6>\n                    <p style={{ fontSize: 17, color: \"#708090\" }}>\n                      Transfer your earning to your wallet anytime. No limit .\n                    </p>\n                  </div>\n                </div>\n              </div>\n\n              {/* ------------------------------Cover------------------------------------------------------- */}\n\n              <div className=\"footer\" align=\"center\">\n                <div>\n                  <a href=\"https://discord.gg/5YkVtFa\" target=\"blank\"><i className=\"fab fa-discord\"></i> &nbsp;{\" \"}</a>\n                  <i className=\"fab fa-telegram\"></i>\n                </div>\n                © 2020 Rushline\n              </div>\n\n              {/* ------------------------------Cover------------------------------------------------------- */}\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}